{"version":3,"sources":["webpack:///./src/store/reducer/pizza-maker.reducer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AACO,IAAM,YAAY,GAAiB;AACtC,cAAY,EAAE,IADwB;AAEtC,QAAM,EAAE,EAF8B;AAGtC,eAAa,EAAE,IAHuB;AAItC,QAAM,EAAE;AAJ8B,CAAnC;AAOP,IAAM,UAAU,GAAG,oEAAW,CAAC;AAC3B,MAAI,EAAE,cADqB;AAE3B,cAAY,EAAE,EAFa;AAG3B,UAAQ,EAAE;AACN,mBAAe,2BAAC,KAAD,EAAQ,MAAR,EAAc;AACjB;AACR,WAAK,CAAC,MAAN,CAAa,IAAb,CAAkB,YAAlB;AACH,KAJK;AAKN,yBAAqB,iCAAC,KAAD,EAAQ,MAAR,EAAc;AACzB;AAAA,UAAE,sBAAF;AAAA,UAAY,0BAAZ;AACN,UAAI,OAAO,GAAG,KAAK,CAAC,MAAN,CAAa,QAAb,EAAuB,QAAvB,CAAgC,UAAhC,EAA4C,OAA1D;AACA,aAAO,GAAG,CAAC,OAAX;AACH;AATK;AAHiB,CAAD,CAA9B;AAuBe;AAAA,IAAuB,oCAAvB;AAEA,yEAAU,CAAC,OAA1B;AAIM,SAAU,iBAAV,CAA4B,KAA5B,EAAkD,MAAlD,EAAwD;AAA5B;AAAA;AAAoB;;AAClD,UAAO,MAAM,CAAC,IAAd;AAEI,SAAK,qEAAL;AAAwB;AACpB,qCACO,KADP,GACY;AACR,gBAAM,EAAE,MAAM,CAAC;AADP,SADZ;AAIH;;AAED,SAAK,sEAAL;AAAyB;AACrB,qCACO,KADP,GACY;AACR,uBAAa,EAAE,KAAK,CAAC,MAAN,CAAa,MAAM,CAAC,GAApB;AADP,SADZ;AAIH;;AAED,SAAK,+DAAL;AAAkB;AAEd,eAAO,KAAP;AAEH;;AAED;AAAS;AACL,eAAO,KAAP;AACH;AAxBL;AA2BH,C","file":"main.69ed4329caa87c10355e.hot-update.js","sourcesContent":["import { SET_PIZZA_RECIPES, SET_SELECTED_PIZZA, ADD_TOPPING } from \"../types/action.types\"\nimport { InitialState, IPizza } from \"../../models/store.model\"\nimport { setPizzaRecipesAction } from '../actions/pizza.actions'\nimport { createReducer, createSlice } from '@reduxjs/toolkit'\nexport const initialState: InitialState = {\n    customerInfo: null,\n    pizzas: [],\n    selectedPizza: null,\n    router: null\n}\n\nconst pizzaSlice = createSlice({\n    name: 'pizzaRecipes',\n    initialState: [],\n    reducers: {\n        addPizzaRecipes(state, action) {\n            const { pizzaRecipes } = action.payload\n            state.pizzas.push(pizzaRecipes)\n        },\n        updateIngredientState(state, action) {\n            const { pizzaKey, toppingKey } = action.payload\n            let isAdded = state.pizzas[pizzaKey].Toppings[toppingKey].isAdded\n            isAdded = !isAdded // push({ isAdded: !state[pizzaKey].Toppings[toppingKey].isAdded })\n        }\n    }\n})\n\n\n// const actionsMap = {\n//     [setPizzaRecipesAction.type]: (state: InitialState[]) => {\n//         state\n//     }\n// }\n\nexport const { updateIngredientState, addPizzaRecipes } = pizzaSlice.actions\n\nexport default pizzaSlice.reducer\n\n// const pizzaMakerReducerFn = createReducer(0, actionsMap)\n\nexport function pizzaMakerReducer(state = initialState, action) {\n    switch(action.type) {\n\n        case SET_PIZZA_RECIPES: {\n            return {\n                ...state,\n                pizzas: action.pizzas\n            }\n        }\n\n        case SET_SELECTED_PIZZA: {\n            return {\n                ...state,\n                selectedPizza: state.pizzas[action.key]\n            }\n        }\n\n        case ADD_TOPPING: {\n            \n            return state\n\n        }\n\n        default: {\n            return state\n        }\n\n    }\n}"],"sourceRoot":""}