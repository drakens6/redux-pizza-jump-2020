{"version":3,"sources":["webpack:///./src/components/EditPizza/EditPizza.tsx","webpack:///./src/store/actions/pizza.actions.tsx","webpack:///./src/store/effects/pizza.effects.tsx","webpack:///./src/store/index.tsx","webpack:///./src/store/reducer/pizza-maker.reducer.tsx","webpack:///./src/store/store.config.tsx"],"names":[],"mappings":"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","file":"main.eeaab80e9e5a00fda10a.hot-update.js","sourcesContent":["import React, { Component } from 'react'\nimport { Button } from 'reactstrap'\nimport Pizza from '../Pizza/Pizza'\nimport { Link } from 'react-router-dom'\nimport './EditPizza.scss'\nimport { connect } from 'react-redux'\nimport { mapStateToProps, mapDispatchToProps } from '../../store/actions/pizza.actions'\nimport { InitialState, IPizzaProps, IPizzaToppings } from '../../models/store.model'\n\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class EditPizza extends Component<InitialState, IPizzaProps> {\n\n    private handleAddToppingOnCLick(toppingKey: number, pizzaKey: number): void {\n        this.props.addTopping(toppingKey, pizzaKey)\n    }\n\n    getToppings(id: number): IPizzaToppings[] {\n        console.log(id)\n        if (typeof id !== 'number') return\n        const toppings = this.props.pizzas[id].Toppings\n\n        if (!toppings.length) return\n        const result = toppings.filter((topping: IPizzaToppings) => topping.isAdded === true)\n\n        return result\n    }\n\n    render() {\n\n        const path = this.props.router.location.pathname as string\n        const id = parseInt(path.split('/')[2])\n\n        console.log(this.props)\n        return (\n            <div className=\"EditPizza__Enclosure\">\n                <div className=\"EditPizza__Enclosure-Header\">\n                    <Button color=\"primary\" tag={Link} to=\"/menu\">Back</Button>\n                    <h3>{this.props.pizzas[id].Name}</h3>\n                    <Button color=\"primary\" tag={Link} to=\"/menu\">Save</Button>\n                </div>\n                <div className=\"EditPizza__Enclosure-Body\">\n                    <div className=\"Body__Pizza\">\n                        <Pizza toppings={this.getToppings(id)}></Pizza>\n                    </div>\n                    <div className=\"Body__Toppings\">\n                        {\n                            this.props.pizzas[id].Toppings.map((topping: IPizzaToppings, index: number) => (\n                                <Button \n                                    className=\"Body__Toppings-Button\" \n                                    onClick={() => this.handleAddToppingOnCLick(index, id)}\n                                    key={`topping-${index}`}>\n                                    <span className=\"Body__Toppings-Content\">\n                                        <span>{topping.name}</span>\n                                        <div className={`Topping__Icon Body__Toppings-Icon--${topping.name.toLowerCase()}`}></div>\n                                        {/* <img className=\"Body__Toppings-Icon\" src={`/assets/${topping.name.toLowerCase()}.svg`} alt=\"Pizza Topping\" /> */}\n                                    </span>\n                                    <span className={topping.isAdded ? \"Body__Toppings-Visible\" : \"\"}>\n                                        <span className=\"Body__Toppings-Selected\">&#10004;</span>\n                                    </span>\n                                </Button>\n                            ))\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import * as actions from '../types/action.types'\nimport { createAction } from '@reduxjs/toolkit'\nexport const mapStateToProps = state => {\n    return {\n        // customerInfo: state.pizzaReducer.customerInfo,\n        ...state.pizzaRecipesReducer,\n        // pizzas: state.pizzaRecipes,\n        router: state.router\n    }\n}\n\nexport const mapDispatchToProps = dispatch => {\n    return {\n               addTopping: (toppingKey, pizzaKey)  => dispatch({ type: actions.ADD_TOPPING, toppingKey: toppingKey, pizzaKey: pizzaKey }),\n              createOrder: order    => dispatch({ type: actions.CREATE_ORDER, order: order }),\n        fetchPizzaRecipes: ()       => dispatch({ type: actions.FETCH_PIZZA_RECIPES }),\n\n    }\n}","import { call, put, takeEvery, all } from 'redux-saga/effects'\nimport { NetworkUtility } from '../../shared/network.util'\n\nimport * as types from '../types/action.types'\n\nfunction* fetchPizzaRecipes() {\n    try {\n\n        const pizzaRecipes = yield call(NetworkUtility.fetchPizzaRecipes)\n\n        yield put({ type: types.SET_PIZZA_RECIPES, pizzas: pizzaRecipes })\n\n    } catch (error) {\n\n        yield put({ type: types.SET_PIZZA_RECIPES_ERROR, message: error })\n\n    }\n}\n\n\n\nexport default function* sagaInitializer() {\n    yield all([\n        takeEvery(types.FETCH_PIZZA_RECIPES, fetchPizzaRecipes),\n        \n    ])\n}","\nimport pizzaMakerReducer from './reducer/pizza-maker.reducer'\n\n// Whenever an action is dispatched, Redux will update each top-level application state property using\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\n// acts on the corresponding ApplicationState property type.\nexport const reducerMap = {\n    pizzaReducer: pizzaMakerReducer\n};\n\n","import { SET_PIZZA_RECIPES, SET_SELECTED_PIZZA, ADD_TOPPING } from \"../types/action.types\"\nimport { InitialState, IPizza } from \"../../models/store.model\"\nimport { createReducer, createSlice } from '@reduxjs/toolkit'\nexport const initialState: InitialState = {\n    customerInfo: null,\n    pizzas: [],\n    selectedPizza: null,\n    router: null\n}\n\nexport function pizzaMakerReducer(state = initialState, action) {\n    switch(action.type) {\n\n        case SET_PIZZA_RECIPES: {\n            return {\n                ...state,\n                pizzas: action.pizzas\n            }\n        }\n\n        case SET_SELECTED_PIZZA: {\n            return {\n                ...state,\n                selectedPizza: state.pizzas[action.key]\n            }\n        }\n\n        case ADD_TOPPING: {\n            \n            return state\n\n        }\n\n        default: {\n            return state\n        }\n\n    }\n}","import { applyMiddleware, combineReducers, compose, createStore, Middleware } from 'redux';\nimport { dispatch } from 'react-redux'\n// import thunk from 'redux-thunk';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { reducerMap } from './index';\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport sagaInitializer from './effects/pizza.effects';\nimport createSagaMiddleware from 'redux-saga'\nimport { SET_SELECTED_PIZZA } from './types/action.types';\n\nimport { configureStore, ConfigureStoreOptions, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nexport default function configureAppStore(history, initialState?) {\n\n    const rootReducer = combineReducers({\n        ...reducerMap,\n        router: connectRouter(history)\n    });\n\n    const sagaMiddleware = createSagaMiddleware()\n\n    const middleware = [\n        sagaMiddleware,\n        routerMiddleware(history), \n    ]\n\n    const store = createStore(\n        rootReducer,\n        initialState,\n        compose(composeWithDevTools(applyMiddleware(...middleware)))\n    ) \n    \n    sagaMiddleware.run(sagaInitializer)\n\n\n    return store\n\n}\n"],"sourceRoot":""}