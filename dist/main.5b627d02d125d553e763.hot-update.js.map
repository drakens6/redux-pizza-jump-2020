{"version":3,"sources":["webpack:///./src/store/store.config.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AAGA;AACA;AAGA;AAEA;AAEc,SAAU,iBAAV,CAA4B,OAA5B,EAAqC,YAArC,EAAkD;AAK5D,MAAM,WAAW,GAAG,6DAAe,CAAC;AAChC,uBAAmB,sEADa;AAEhC,UAAM,EAAE,4EAAa,CAAC,OAAD;AAFW,GAAD,CAAnC;AAcA,MAAM,cAAc,GAAG,0DAAoB,EAA3C;;AAEA,MAAM,UAAU,kBACT,6EAAoB,CAAC;AAAE,SAAK,EAAE;AAAT,GAAD,CADX,EAC6B,CACzC,cADyC,EAEzC,+EAAgB,CAAC,OAAD,CAFyB,CAD7B,CAAhB;;AAMA,MAAM,OAAO,GAA0B;AACnC,WAAO,EAAE,WAD0B;AAEnC,cAAU,EAAE,UAFuB;AAGnC,YAAQ,EAAE,IAHyB;AAInC,kBAAc,EAAE;AAJmB,GAAvC;AAOA,MAAM,KAAK,GAAG,uEAAc,CAAC,OAAD,CAA5B;AAEA,gBAAc,CAAC,GAAf,CAAmB,8DAAnB;AAGA,SAAO,KAAP;AAEH,C","file":"main.5b627d02d125d553e763.hot-update.js","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore, Middleware } from 'redux';\nimport { dispatch } from 'react-redux'\n// import thunk from 'redux-thunk';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { reducerMap } from './index';\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport sagaInitializer from './effects/pizza.effects';\nimport createSagaMiddleware from 'redux-saga'\nimport { SET_SELECTED_PIZZA } from './types/action.types';\n\nimport { configureStore, ConfigureStoreOptions, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { updateIngredientState } from './reducer/pizza-maker.reducer';\nimport pizzaRecipesReducer from './reducer/pizza-maker.reducer'\n\nexport default function configureAppStore(history, initialState?) {\n    // const middleware: Middleware[] = [\n        \n    // ];\n\n    const rootReducer = combineReducers({\n        pizzaRecipesReducer,\n        router: connectRouter(history)\n    });\n\n    // const enhancers = [];\n    // const windowIfDefined = typeof window === 'undefined' ? null : window\n\n    // const store = createStore(pizzaMakerReducer, composeWithDevTools())\n\n    // if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\n    //     enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\n    // }\n\n    const sagaMiddleware = createSagaMiddleware()\n\n    const middleware = [\n        ...getDefaultMiddleware({ thunk: false }), \n        sagaMiddleware,\n        routerMiddleware(history), \n    ]\n\n    const options: ConfigureStoreOptions = {\n        reducer: rootReducer,\n        middleware: middleware,\n        devTools: true,\n        preloadedState: initialState\n    }\n\n    const store = configureStore(options)\n\n    sagaMiddleware.run(sagaInitializer)\n\n\n    return store\n\n}\n"],"sourceRoot":""}